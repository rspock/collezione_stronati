<?php

namespace Rs\CollezioneStronatiBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Config\Definition\Exception\Exception;
use Doctrine\ORM\Query;

/**
 * OggettoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OggettoRepository extends EntityRepository
{
    public function getOggettiPaginati($classeOggetto, $idProduttore, $pagina){

        $em = $this->getEntityManager();

        $dql = "SELECT o FROM RsCollezioneStronatiBundle:Oggetto o JOIN o.produttore p".
            " WHERE o INSTANCE OF ".$classeOggetto;

        $query = null;
        if($idProduttore != null){
            $dql .= " AND p.id = :idProduttore ORDER BY o.id DESC";
            $query = $em->createQuery($dql)->setParameters(array("idProduttore" => $idProduttore));
        }else{
            $dql .= " ORDER BY o.id DESC";
            $query = $em->createQuery($dql);
        }

        $oggetti = $query->getResult();

        global $kernel;
        $paginator = $kernel->getContainer()->get('knp_paginator');
        $pagination = $paginator->paginate(
            $oggetti, $pagina, 9
        );
        return $pagination;

        if(count($oggetti) > 9){

        }else{
            return $oggetti;
        }
    }

    public function getConteggiOggetti(){
        $em = $this->getEntityManager();

        $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o INSTANCE OF RsCollezioneStronatiBundle:Mignon";

        $queryIdratata = $em->createQuery ( $dql );
        $conteggi["mignon"] = $queryIdratata->getSingleScalarResult();

        $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o INSTANCE OF RsCollezioneStronatiBundle:Bicchiere";

        $queryIdratata = $em->createQuery ( $dql );
        $conteggi["bicchieri"] = $queryIdratata->getSingleScalarResult();

        $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o INSTANCE OF RsCollezioneStronatiBundle:Profumo";

        $queryIdratata = $em->createQuery ( $dql );
        $conteggi["profumi"] = $queryIdratata->getSingleScalarResult();

        return $conteggi;
    }

    public function getConteggioDispositiviNonSincronizzati($nomeDispositivo){
        $em = $this->getEntityManager();

        $dql ="";
        switch($nomeDispositivo){
            case "dispositivoUno":
                $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o.dispositivoUno IS NULL";
                break;
            case "dispositivoDue":
                $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o.dispositivoDue IS NULL";
                break;
            case "dispositivoTre":
                $dql = "SELECT COUNT (o.id) FROM RsCollezioneStronatiBundle:Oggetto o WHERE o.dispositivoTre IS NULL";
                break;
            default:
                throw new Exception("Nome dispositivo non valido");
        }

        $queryIdratata = $em->createQuery ( $dql );
        return $queryIdratata->getSingleScalarResult();
    }

    public function getElementoDaSincronizzare($nomeDispositivo){
        $em = $this->getEntityManager();

        $dql ="SELECT o FROM RsCollezioneStronatiBundle:Oggetto o WHERE o.".$nomeDispositivo." IS NULL ORDER BY o.id ASC";

        $query = $em->createQuery ( $dql )->setMaxResults(1);
        $query->setFetchMode("RsCollezioneStronatiBundle:Oggetto", "produttore", \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $query->setFetchMode("RsCollezioneStronatiBundle:Oggetto", "foto", \Doctrine\ORM\Mapping\ClassMetadata::FETCH_EAGER);
        $risultato = $query->getSingleResult();
        $risultato->setProduttore($risultato->getProduttore());
        $ac = new ArrayCollection();
        foreach($risultato->getFoto() as $foto){
            $foto->setContenuto( $foto->getStream());
        }
        return $risultato;
    }

}
